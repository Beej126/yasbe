<Window x:Class="YASBE.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:global="clr-namespace:;assembly="
        xmlns:local="clr-namespace:YASBE"
        xmlns:SysIO="clr-namespace:System.IO;assembly=mscorlib"
        Title="YASBE - Yet Another Simple Backup Enabler" WindowState="Maximized"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        xmlns:Properties="clr-namespace:YASBE.Properties"
        xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase"
        xmlns:conv="clr-namespace:WPFValueConverters"
 >

  <Window.CommandBindings>
    <!--CommandBinding Command="{x:Static local:RoutedCommands.CopyToExclusions}" Executed="CopyToExclusions_Executed" /-->
  </Window.CommandBindings>

  <Grid>
    
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="1*" />
      <ColumnDefinition Width="Auto" />
      <ColumnDefinition Width="5*" />
    </Grid.ColumnDefinitions>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"  />
      <RowDefinition Height="*" />
    </Grid.RowDefinitions>
    
    <GridSplitter Grid.Column="1" Grid.Row="1" ResizeDirection="Columns" Width="10" ResizeBehavior="PreviousAndNext" VerticalAlignment="Stretch" />
    
    <Border Background="LightSteelBlue" Padding="10" Grid.Row="0" Grid.ColumnSpan="3"  >
      
      <StackPanel Orientation="Vertical">
      
        <StackPanel Orientation="Horizontal" >
        </StackPanel>

        <StackPanel Orientation="Horizontal" >
          <Button Content="Save Profile Parameters" Click="BackupProfileSave_Click" />
          <Label FontSize="24" Content="Current Backup Profile:" />
          <ComboBox Name="cbxBackupProfiles" SelectionChanged="cbxBackupProfiles_SelectionChanged" 
                    DisplayMemberPath="Name" 
                    SelectedValuePath="BackupProfileID" 
                    SelectedValue="{Binding Mode=TwoWay, Source={x:Static Properties:Settings.Default}, Path=SelectedBackupProfileID}" />
          <Button Content="Refresh" Click="RefreshProfile_Click" />
          
          <Label Content="Media Size:" />
          <ComboBox Name="cbxMediaSize" DisplayMemberPath="Name" SelectedValuePath="MediaSizeID" diagnostics:PresentationTraceSources.TraceLevel="High"
                    SelectedValue="{Binding Mode=TwoWay, ElementName=cbxBackupProfiles, Path=SelectedItem[MediaSizeID]}" />
          <Button Content="Edit Size" Click="EditMediaSize_Click" />
        </StackPanel>

        <StackPanel Orientation="Vertical">
          <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
            <TextBlock Text="Windows Burn Staging Folder:"  />
            <ComboBox Name="cbxBurnFolders" ItemsSource="{Binding Mode=OneTime, Source={x:Static local:MainWindow.WindowsBurnStagingFolders}}" SelectedIndex="0" />
            <Button Content="Open In Explorer..." Click="OpenStagingFolder_Click" />
              <!--Button.Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}"> <nugget: basing a Style off the Default Style>
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding ElementName=cbxBurnFolders, Path=SelectedIndex}" Value="-1"> <nugget: Button.IsEnabled based on ComboBox.SelectedIndex >
                      <Setter Property="Button.IsEnabled" Value="False" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </Button.Style>
            </Button-->
          </StackPanel>
          <StackPanel Orientation="Horizontal">
            <StackPanel Orientation="Vertical" Margin="0 0 5 0">
              <TextBlock Text="Favorite Staging Folders:" />
              <ListBox Name="lbxFavoriteBurnFolders" MinWidth="50" DisplayMemberPath="Path" SelectedValuePath="Path" />
            </StackPanel>
            <Button Content="Assign Favorite to Selected Staging Folder" Click="AssignFavoriteToSelectedBurnStagingFolder_Click" />
            <Button Content="Add New Favorite..." Click="AddNewFavoriteTempBurnFolder_Click" />
          </StackPanel>
        </StackPanel>

      </StackPanel>
    </Border>

    <Grid Grid.Row="1" Grid.Column="2">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      
      <GroupBox Header="Incremental Backup History" >
        <DockPanel>
          <DockPanel.Resources>
            <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
              <Setter Property="Margin" Value="3 3 0 0" />
            </Style>
          </DockPanel.Resources>
          <WrapPanel DockPanel.Dock="Top" Background="LightSteelBlue">
            <Button Content="New Incremental Backup" Click="NewIncremental_Click" Margin="10" />
            <Label Content="Active Incremental #:" FontSize="14" FontWeight="Bold" />
            <TextBlock DataContext="{Binding Mode=OneWay, Path=ActiveIncrementalRow}" 
                     Visibility="{Binding Mode=OneWay, Converter={conv:NotNullToVisibleConverter}}"> <!-- blank path passes DataContext object to converter -->
            <TextBlock.Text>
              <MultiBinding StringFormat="{}{0} - {1:MMM dd, yyyy}" >
                <Binding Mode="OneWay" Path="[IncrementalID]" />
                <Binding Mode="OneWay" Path="[BackupDate]" />
              </MultiBinding>
            </TextBlock.Text>
            </TextBlock>
          </WrapPanel>

          <DataGrid Name="gridIncrementalHistory" AutoGenerateColumns="True" MaxHeight="100" IsReadOnly="True" HeadersVisibility="Column" />
        </DockPanel>
      </GroupBox>
      
      <GroupBox Header="Current Backup Files Working Set" Grid.Row="1" Margin="0 10 0 0" >
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
          </Grid.RowDefinitions>
         
          <WrapPanel DockPanel.Dock="Top" Background="LightSteelBlue" Grid.Row="1" >
            <StackPanel Orientation="Vertical">
              <StackPanel Orientation="Horizontal">
                <Label Content="Working on Disc #:"/>
                <Label Name="lblCurrentDisc" FontWeight="Bold" />
              </StackPanel>
              <StackPanel Orientation="Horizontal">
                <TextBlock Text="Total Files Remaining: " />
                <TextBlock Name="lblTotalFiles" Text="-" />
                <TextBlock Text=" (" />
                <TextBlock Name="lblTotalBytes" Text="-" />
                <TextBlock Text=" Bytes)" />
              </StackPanel>
              <StackPanel Orientation="Horizontal">
                <TextBlock Text="Remaining Discs Required: " />
                <TextBlock Name="lblDiscCount" Text="-" />
              </StackPanel>
            </StackPanel>  
             
            <StackPanel Orientation="Vertical" VerticalAlignment="Center" Margin="10 0 0 0">
              <CheckBox Content="Show Errors Only" Margin="0,5,0,0" Name="chkShowErrorsOnly" Click="chkShowErrorsOnly_Click"  />
              <StackPanel Orientation="Horizontal">
                <TextBlock Text="Errors: " />
                <TextBlock Name="lblErrorCount" Text="-" />
              </StackPanel>
            </StackPanel>
            <StackPanel Orientation="Vertical" Margin="5 0">
              <Button Content="Select Next Disc's Worth Of Files" Margin="0 0 0 5" Click="IdentifyNextMediaSubset_Click" />
              <StackPanel Orientation="Horizontal">
                <TextBlock Text="Selected: " />
                <TextBlock Name="lblQtySelected" Text="-" />
                <TextBlock Text=" (" />
                <TextBlock Name="lblBytesSelected" Text="-" />
                <TextBlock Text=" Bytes)" />
              </StackPanel>
            </StackPanel>
            <Button Content="Send Files To Burn Folder" Click="SymLinkToBurn_Click"  />
            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
              <RadioButton Name="rdoSymLink" Margin="0 0 15 5" Content="Symbolic Links" GroupName="BurnFolderCopyTypeRadioGroup" ToolTip="Many Burners (e.g. Nero) will copy SymLinks directly (i.e. not the file itself), which is worthless." />
              <RadioButton Name="rdoTrueCopy" Content="True File Copy" IsChecked="True" GroupName="BurnFolderCopyTypeRadioGroup" />
            </StackPanel>
            <Button Content="Mark Current Disc Complete" Click="MediaSubsetCommit_Click" />
          </WrapPanel>

          <DataGrid Grid.Row="2" Grid.ColumnSpan="2" Name="gridFilesWorkingSet" IsReadOnly="True" HeadersVisibility="Column" AutoGenerateColumns="True" >
            <DataGrid.Resources>
              <!-- nugget: colorizing individual cell elements based on underlying data field values -->
              <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource PrettyDataGridCellStyle}">
                <Style.Triggers>
                  <DataTrigger Value="True" Binding="{Binding Mode=OneWay, Path=Selected}">
                    <Setter Property="Background" Value="LightYellow" />
                  </DataTrigger>
                  <DataTrigger Value="True" Binding="{Binding Mode=OneWay, Path=SkipError}">
                    <Setter Property="Background" Value="Pink" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>

             </DataGrid.Resources>

            <!--DataGrid.Columns>
              <DataGridTemplateColumn>
                <DataGridTemplateColumn.CellTemplate>
                  <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                      <Button Content="+" ToolTip="Add To Burn Folder" Click="AddSingleToBurn_Click" Padding="0" Margin="0" />
                      <Button Content="-" ToolTip="Remove From Burn Folder" Click="RemoveSingleToBurn_Click" Padding="0" Margin="0" />
                    </StackPanel>
                  </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
              </DataGridTemplateColumn>
            </DataGrid.Columns-->

          </DataGrid>
        </Grid>
      </GroupBox>
    </Grid>

    <Grid Grid.Row="1">
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>

      <!--GridSplitter Grid.Row="1" ResizeDirection="Rows" Height="10" ResizeBehavior="PreviousAndNext"  HorizontalAlignment="Stretch" /-->

      <GroupBox Header="Selected Backup Folders">
        <TreeView Name="treeFolders" ItemsSource="{Binding Source={x:Static global:FileSystemNode.RootDirectories}, Path=Values}"
                  BorderThickness="0" Padding="0 4 5 2" >
        <!--nugget: binding to a Dictionary<> requires additional Path=Values -->
        <TreeView.Resources>

          <Style TargetType="CheckBox">
            <Setter Property="Margin" Value="0 0 3 0" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="IsChecked" Value="{Binding Mode=TwoWay, Path=IsSelected}" />
            <Setter Property="Background">
              <Setter.Value>
                <MultiBinding  Converter="{local:FileTreeBackgroundBrushConverter}" Mode="OneWay">
                  <Binding Path="IsSelected" Mode="OneWay" />
                  <Binding Path="IsExcluded" Mode="OneWay" />
                </MultiBinding>
              </Setter.Value>
            </Setter>
          </Style>

          <!-- nugget: very odd, the exact same Style that worked for ComboBox wouldn't for TextBlock unless applied via StaticResource to the key'd Style??? -->
          <Style x:Key="TreeTextBlock" TargetType="TextBlock">
            <Setter Property="Padding" Value="2 0 4 1" />
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="Text" Value="{Binding Mode=OneTime, Path=Name}" />
            <Setter Property="Background">
              <Setter.Value>
                <MultiBinding Converter="{local:FileTreeBackgroundBrushConverter}" Mode="OneWay">
                  <Binding Path="IsSelected" Mode="OneWay" />
                  <Binding Path="IsExcluded" Mode="OneWay" />
                </MultiBinding>
              </Setter.Value>
            </Setter>
          </Style>

          <HierarchicalDataTemplate DataType="{x:Type global:FolderNode}" ItemsSource="{Binding Path=Children.Values}">
            <WrapPanel>
              <!--WrapPanel.ContextMenu>
                <ContextMenu>
                  <MenuItem Header="Copy Path to Exclusions" Command="{x:Static local:RoutedCommands.CopyToExclusions}" CommandParameter="{Binding Mode=OneTime, Path=FullPath}" />
                </ContextMenu>
              </WrapPanel.ContextMenu-->

              <CheckBox />

              <TextBlock Text="*" ToolTip="Contains selections further down" Foreground="Red" 
                       Visibility="{Binding Mode=OneWay, Path=IsSubSelected, Converter={conv:BooleanToVisibilityConverter}}" />

              <TextBlock Style="{StaticResource TreeTextBlock}" 
                         FontStyle="{Binding Mode=OneTime, Path=IsFunky, Converter={conv:BoolToItalicConverter}}"
                         Foreground="{Binding Mode=OneTime, Path=IsFunky, Converter={conv:BoolToSolidBrushConverter}, ConverterParameter='Red,Blue'}" />

              <TextBlock Text="*!*" ToolTip="Previously recorded folder, no longer present" Foreground="Red" 
                       Visibility="{Binding Mode=OneTime, Path=IsMissing, Converter={conv:BooleanToVisibilityConverter}}" />
            </WrapPanel>
          </HierarchicalDataTemplate>

          <HierarchicalDataTemplate DataType="{x:Type global:FileNode}" >
            <WrapPanel>

              <CheckBox />

              <TextBlock Style="{StaticResource TreeTextBlock}" />

              <TextBlock Text="*!*" ToolTip="Previously recorded file, no longer present" Foreground="Red" 
                       Visibility="{Binding Mode=OneTime, Path=IsMissing, Converter={conv:BooleanToVisibilityConverter}}" />
            </WrapPanel>
          </HierarchicalDataTemplate>


        </TreeView.Resources>

      </TreeView>
      </GroupBox>

      <!--GroupBox Grid.Row="2" >
        <GroupBox.Header>
          <StackPanel Orientation="Horizontal">
            <TextBlock Text="Exclusions" FontSize="15" />
            <TextBlock Text="(found anywhere in the path)" VerticalAlignment="Bottom" />
          </StackPanel>
        </GroupBox.Header>
        <TextBox TextWrapping="WrapWithOverflow" AcceptsReturn="True" Name="txtExclusions" />
      </GroupBox-->

    </Grid>

  </Grid>
</Window>
