<Window x:Class="YASBE.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:global="clr-namespace:;assembly="
        xmlns:local="clr-namespace:YASBE"
        xmlns:SysIO="clr-namespace:System.IO;assembly=mscorlib"
        Title="MainWindow" WindowState="Maximized"
        Loaded="MainWindow_Loaded"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        xmlns:Properties="clr-namespace:YASBE.Properties"
        xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase"
        xmlns:conv="clr-namespace:WPFValueConverters"
 >

  <Window.CommandBindings>
    <CommandBinding Command="{x:Static local:RoutedCommands.CopyToExclusions}" Executed="CopyToExclusions_Executed" />
  </Window.CommandBindings>


  <Window.Resources>
    <Style x:Key="ReadOnlyTextBox" TargetType="{x:Type TextBox}" >
      <Setter Property="Background" Value="#eeeeee"/>
      <Setter Property="IsTabStop" Value="False"/>
      <Setter Property="IsReadOnly" Value="True" />
      <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="BaseTextBlockStyle" TargetType="TextBlock">
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="Margin" Value="0 0 5 0" />
    </Style>

    <Style x:Key="BigButtonText" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
      <Setter Property="FontSize" Value="24" />
    </Style>
    
    <Style TargetType="ComboBox">
      <Setter Property="Margin" Value="0 0 5 0" />
      <Setter Property="Padding" Value="7" />
      <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    
    <Style TargetType="Button">
      <Setter Property="Margin" Value="0 0 5 0" />
      <Setter Property="Padding" Value="5" />
      <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="Image">
      <Setter Property="Height" Value="40" />
    </Style>

    <Style TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}" />

    <Style TargetType="Label">
      <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="GroupBox">
      <Setter Property="HeaderTemplate">
        <Setter.Value>
          <DataTemplate>
            <TextBlock Text="{Binding}" Foreground="Black" FontSize="16" />
          </DataTemplate>
        </Setter.Value>
      </Setter>
    </Style>

  </Window.Resources>
  
  <Grid>
    
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="1*" />
      <ColumnDefinition Width="Auto" />
      <ColumnDefinition Width="2*" />
    </Grid.ColumnDefinitions>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"  />
      <RowDefinition Height="*" />
    </Grid.RowDefinitions>
    
    <GridSplitter Grid.Column="1" Grid.Row="1" ResizeDirection="Columns" Width="10" ResizeBehavior="PreviousAndNext" VerticalAlignment="Stretch" />
    
    <Border Background="LightSteelBlue" Padding="10" Grid.Row="0" Grid.ColumnSpan="3"  >
      
      <StackPanel Orientation="Vertical">
      
        <StackPanel Orientation="Horizontal" >
        
          <Button Click="DoIt_Click" >
            <StackPanel Orientation="Horizontal">
              <TextBlock Text="Do It" Style="{StaticResource BigButtonText}"  />
              <Image Source="Arrow - Large Right - Green.png" />
            </StackPanel>
          </Button>
        
          <Button Click="Abort_Click" >
            <StackPanel Orientation="Horizontal">
              <TextBlock Text="Abort" Style="{StaticResource BigButtonText}"   />
              <Image Source="Forbidden 02.png" />
            </StackPanel>
          </Button>

          <WrapPanel Orientation="Horizontal" Width="350">
            <WrapPanel.Resources>
              <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Margin" Value="3 3 0 0" />
              </Style>
            </WrapPanel.Resources>
            <Button Content="Stamp Current Batch as 'Archived'" />
          </WrapPanel>
          
          <Label FontSize="32" Content="Status:" />
          <Label FontSize="32" FontWeight="Bold" Content="Stopped" Name="lblStatus" />
        
        </StackPanel>

        <StackPanel Orientation="Horizontal" >
        </StackPanel>

        <StackPanel Orientation="Horizontal" >
          <Button Content="Save Profile Parameters" Click="BackupProfileSave_Click" />
          <Label FontSize="24" Content="Current Backup Profile:" />
          <ComboBox Name="cbxBackupProfiles" 
                    DisplayMemberPath="Name" 
                    SelectedValuePath="BackupProfileID" 
                    SelectedValue="{Binding Mode=TwoWay, Source={x:Static Properties:Settings.Default}, Path=SelectedBackupProfileID}"
                    SelectionChanged="cbxBackupProfiles_SelectionChanged" />
            <!--ComboBox.ItemContainerStyle>
              <Style>
                <Style.Triggers>
                  <DataTrigger Binding ="{Binding Mode=OneWay, Path=BackupProfileID}" Value="1">
                    <Setter Property="ComboBoxItem.IsEnabled" Value="False"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </ComboBox.ItemContainerStyle>
          </ComboBox-->
          
          <Label Content="Media Size:" />
          <ComboBox Name="cbxMediaSize" DisplayMemberPath="Name" SelectedValuePath="MediaSizeID" diagnostics:PresentationTraceSources.TraceLevel="High"
                    SelectedValue="{Binding Mode=TwoWay, ElementName=cbxBackupProfiles, Path=SelectedItem[MediaSizeID]}" />
          <Label Content="{Binding Mode=OneWay, ElementName=cbxBackupProfiles, Path=SelectedItem[MediaSizeID]}" />

        </StackPanel>

        <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
          <TextBlock Text="Windows Burn Staging Folder:"  />
          <ComboBox Name="cbxDrives" ItemsSource="{Binding Mode=OneTime, Source={x:Static local:MainWindow.WindowsBurnStagingFolders}}" SelectedIndex="0" />
          <Button Content="Open In Explorer..." Click="OpenStagingFolder_Click" />
            <!--Button.Style>
              <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}"> <nugget: basing a Style off the Default Style>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ElementName=cbxDrives, Path=SelectedIndex}" Value="-1"> <nugget: Button.IsEnabled based on ComboBox.SelectedIndex >
                    <Setter Property="Button.IsEnabled" Value="False" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Button.Style>
          </Button-->
        </StackPanel>
        
      </StackPanel>
    </Border>

    <Grid Grid.Row="1" Grid.Column="2">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="*" />
      </Grid.RowDefinitions>
      
      <GroupBox Header="Incremental Backup History"  >
        <DockPanel>
          <DockPanel.Resources>
            <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
              <Setter Property="Margin" Value="3 3 0 0" />
            </Style>
          </DockPanel.Resources>
          <WrapPanel DockPanel.Dock="Top" Background="LightSteelBlue">
            <Button Content="New Incremental Backup" Click="NewIncremental_Click" />
            <Label Content="Active Incremental #:" FontSize="14" FontWeight="Bold" />
            <TextBlock DataContext="{Binding Mode=OneWay, Path=ActiveIncrementalRow}" 
                     Visibility="{Binding Mode=OneWay, Converter={conv:NotNullToVisibleConverter}}"> <!-- blank path passes DataContext object to converter -->
            <TextBlock.Text>
              <MultiBinding StringFormat="{}{0} - {1:MMM dd, yyyy}" >
                <Binding Mode="OneWay" Path="[IncrementalID]" />
                <Binding Mode="OneWay" Path="[BackupDate]" />
              </MultiBinding>
            </TextBlock.Text>
            </TextBlock>
          </WrapPanel>

          <DataGrid Name="gridIncrementalHistory" AutoGenerateColumns="True" MaxHeight="100" IsReadOnly="True" HeadersVisibility="Column">
            <DataGrid.ContextMenu>
              <ContextMenu>
                <MenuItem Header="Make Active" Click="MakeActiveIncremental_Click" />
              </ContextMenu>
            </DataGrid.ContextMenu>

          </DataGrid>
        </DockPanel>
      </GroupBox>
      
      <GroupBox Header="Current Backup Files Working Set" Grid.Row="1" >
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>

          <WrapPanel DockPanel.Dock="Top" Background="LightSteelBlue" Grid.ColumnSpan="2">
            <Button Content="Get All Current Files" Click="GatherCandidates_Click" />
            <Button Content="Show Folders" Click="ShowSelectedFolders_Click" />
            <Button Content="Show Files" Click="ShowIncludedFiles_Click" />
            <Button Content="Compute Incremental" Margin="20 3 0 0" Click="ComputeIncremental_Click" />
          </WrapPanel>
          
          <WrapPanel DockPanel.Dock="Top" Background="LightSteelBlue" Grid.Row="1" >
            <Label Content="Discs Required: " />
            <Label Name="lblDiscsRequired" FontWeight="Bold" />
            <Label Content="Current Disc: "  />
            <Label Name="lblCurrentDisc" FontWeight="Bold" />
            <Button Content="Mark Current Disc Complete" Margin="10 3 0 3" />
          </WrapPanel>

          <Border Background="LightSteelBlue" Grid.Row="1" Grid.Column="1" BorderThickness="0" >
            <TextBlock VerticalAlignment="Bottom" Margin="5 0 3 0"
                       Text="{Binding Mode=OneWay, ElementName=gridFilesWorkingSet, Path=Items.Count, StringFormat='{}{0:#,#,#} items'}" />
          </Border>

          <DataGrid Grid.Row="2" Grid.ColumnSpan="2"
                    Name="gridFilesWorkingSet" IsReadOnly="True" HeadersVisibility="Column"
                    AutoGenerateColumns="True" 
                    ItemsSource="{Binding Mode=OneWay, Source={x:Static local:BackupFile.List}}">
            <DataGrid.Resources>
              <Style TargetType="{x:Type TextBlock}">
                <Setter Property="TextAlignment" Value="Right" />
                <Setter Property="Foreground" Value="Red" />
              </Style>

              <Style x:Key="RightAlignStyling" TargetType="{x:Type TextBlock}">
                <Setter Property="TextAlignment" Value="Right" />
              </Style>
            
            </DataGrid.Resources>
          </DataGrid>
        </Grid>
      </GroupBox>
    </Grid>

    <Grid Grid.Row="1">
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>

      <!--GridSplitter Grid.Row="1" ResizeDirection="Rows" Height="10" ResizeBehavior="PreviousAndNext"  HorizontalAlignment="Stretch" /-->

      <GroupBox Header="Selected Backup Folders">
        <TreeView Name="treeFolders" ItemsSource="{Binding Source={x:Static global:FileSystemNode.RootDirectories}, Path=Values}"
                  BorderThickness="0" Padding="0 4 5 2" >
        <!--nugget: binding to a Dictionary<> requires additional Path=Values -->
        <TreeView.Resources>

          <Style TargetType="CheckBox">
            <Setter Property="Margin" Value="0 0 3 0" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="IsChecked" Value="{Binding Mode=TwoWay, Path=IsSelected}" />
            <Setter Property="Background">
              <Setter.Value>
                <MultiBinding  Converter="{local:FileTreeBackgroundBrushConverter}" Mode="OneWay">
                  <Binding Path="IsSelected" Mode="OneWay" />
                  <Binding Path="IsExcluded" Mode="OneWay" />
                </MultiBinding>
              </Setter.Value>
            </Setter>
          </Style>

          <!-- nugget: very odd, the exact same Style that worked for ComboBox wouldn't for TextBlock unless applied via StaticResource to the key'd Style??? -->
          <Style x:Key="TreeTextBlock" TargetType="TextBlock">
            <Setter Property="Padding" Value="2 0 4 1" />
            <Setter Property="VerticalAlignment" Value="Top" />
            <Setter Property="Text" Value="{Binding Mode=OneTime, Path=Name}" />
            <Setter Property="Background">
              <Setter.Value>
                <MultiBinding Converter="{local:FileTreeBackgroundBrushConverter}" Mode="OneWay">
                  <Binding Path="IsSelected" Mode="OneWay" />
                  <Binding Path="IsExcluded" Mode="OneWay" />
                </MultiBinding>
              </Setter.Value>
            </Setter>
          </Style>

          <HierarchicalDataTemplate DataType="{x:Type global:FolderNode}" ItemsSource="{Binding Path=Children.Values}">
            <WrapPanel>
              <!--WrapPanel.ContextMenu>
                <ContextMenu>
                  <MenuItem Header="Copy Path to Exclusions" Command="{x:Static local:RoutedCommands.CopyToExclusions}" CommandParameter="{Binding Mode=OneTime, Path=FullPath}" />
                </ContextMenu>
              </WrapPanel.ContextMenu-->

              <CheckBox />

              <TextBlock Text="*" ToolTip="Contains selections further down" Foreground="Red" 
                       Visibility="{Binding Mode=OneWay, Path=IsSubSelected, Converter={conv:BooleanToVisibilityConverter}}" />

              <TextBlock Style="{StaticResource TreeTextBlock}" 
                         FontStyle="{Binding Mode=OneTime, Path=IsFunky, Converter={conv:BoolToItalicConverter}}"
                         Foreground="{Binding Mode=OneTime, Path=IsFunky, Converter={conv:BoolToSolidBrushConverter}, ConverterParameter='Red,Blue'}" />

              <TextBlock Text="*!*" ToolTip="Previously recorded folder, no longer present" Foreground="Red" 
                       Visibility="{Binding Mode=OneTime, Path=IsMissing, Converter={conv:BooleanToVisibilityConverter}}" />
            </WrapPanel>
          </HierarchicalDataTemplate>

          <HierarchicalDataTemplate DataType="{x:Type global:FileNode}" >
            <WrapPanel>

              <CheckBox />

              <TextBlock Style="{StaticResource TreeTextBlock}" />

              <TextBlock Text="*!*" ToolTip="Previously recorded file, no longer present" Foreground="Red" 
                       Visibility="{Binding Mode=OneTime, Path=IsMissing, Converter={conv:BooleanToVisibilityConverter}}" />
            </WrapPanel>
          </HierarchicalDataTemplate>


        </TreeView.Resources>

      </TreeView>
      </GroupBox>

      <!--GroupBox Grid.Row="2" >
        <GroupBox.Header>
          <StackPanel Orientation="Horizontal">
            <TextBlock Text="Exclusions" FontSize="15" />
            <TextBlock Text="(found anywhere in the path)" VerticalAlignment="Bottom" />
          </StackPanel>
        </GroupBox.Header>
        <TextBox TextWrapping="WrapWithOverflow" AcceptsReturn="True" Name="txtExclusions" />
      </GroupBox-->

    </Grid>

  </Grid>
</Window>
